name: ci_cache

on:
  push:
    branches: ["ci_cache"]

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Cache node modules on install
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: node-modules-

      # 查看缓存是否设置成功，输出 node_modules 目录
      - name: Check if has cache
        run: ls -lah node_modules | head -5

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install
  lint:
    runs-on: ubuntu-latest
    # 通过 needs 字段可设置前置依赖的 Job，比如 install
    needs: install
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Cache node modules on lint
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: node-modules-
      - name: Run build for eslint
        run: npm run build
  test:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('yarn.lock') }}
          restore-keys: node-modules-
      - name: Run test
        run: npm run test
